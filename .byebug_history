exit
File.exists?("shared/recurring_secrets.yml")
File.exists?("../shared/recurring_secrets.yml")
File.exists?(secret_file)

SHARED_DIR
continue
exit
reload!
(today + 1 - today.beginning_of_month).class
today + 1 - today.beginning_of_month
11 == today + 1 - today.beginning_of_month
11 == today + 1 - today.beginning_of_month.
11 == today + 1 - today.beginning_of_month.to_i
(today + 1 - today.beginning_of_month).to_i
today + 1 - today.beginning_of_month.to_i
today + 1 - today.beginning_of_month
today = Date.today
Date.today.beginning_of_day..Date.today.end_of_day
Date.today.end_of_quarter.day
self.instance_variables
self.instance_values
self.methods.sort
self
self.class
class
self
exit
name_was
name_changed?
self
exit
name_changed?
dirty?
name_was
self
continue
schedule_params
exit
schedule_params
exit
schedule_params
exit
params
schedule_params
exit
params
schedule_params
exit
schedule_params
params
continue
@workers_with_params.to_h
exit
@workers_with_params
continue
Sidekiq::Scheduler.reload_schedule!
continue
Sidekiq::Scheduler.reload_schedule!
Sidekiq.get_schedule
continue
Sidekiq.get_schedule
Sidekiq.set_schedule('heartbeat', { 'every' => ['1h'], 'class' => 'HeartbeatWorker' })
continue
Sidekiq::Scheduler.reload_schedule!
Sidekiq.get_schedule
continue
Sidekiq::Scheduler.reload_schedule!
Sidekiq.get_schedule
continue
@return_authorization.errors
@return_authorization.confirm
continue
@return_authorization
exit
params
return_authorization_params
@return_authorization
continue
Order.find_by(number: params[:order_number])
params
continue
current_user.has_role?(:super_admin)
current_user
@orders.map(&:number)
@orders.size
continue
@orders.size
@orders
next
@orders
  params
continue
response.success?
continue
update_columns(refunded: sum)
response.transaction
response.success?
response
continue
42.95 - 8.59
base.to_f
base
discount
next
order_line_item.actual_quantity
order_line_item.applied_discount.to_f
order_line_item.applied_discount
base.to_f
base
continue
lir.quantity + oli.quantity_returned.to_i <= oli.actual_quantity.to_i
oli = lir.order_line_item
lir = @return_authorization.line_item_returns.first
@return_authorization.line_item_returns.first.quantity
@return_authorization.line_item_returns.first.order_line_item
@return_authorization.line_item_returns
@return_authorization.line_item_retunrs
@return_authorization.confirm!
@return_authorization.confirm
 continue
continue
orders
continue
exit
order_line_items
continue
exit
ActiveRecord::Base.connection.execute(sql)
sql = 'SELECT DISTINCT orders.* FROM "orders" INNER JOIN "order_line_items" ON "orders"."id" = "order_line_items"."order_id" INNER JOIN "line_item_shipments" ON "order_line_items"."id" = "line_item_shipments"."order_line_item_id" WHERE "line_item_shipments"."shipment_id" = $1  ORDER BY "order_line_items"."order_line_number" ASC, orders.id DESC'
Order.sql('SELECT DISTINCT orders.* FROM "orders" INNER JOIN "order_line_items" ON "orders"."id" = "order_line_items"."order_id" INNER JOIN "line_item_shipments" ON "order_line_items"."id" = "line_item_shipments"."order_line_item_id" WHERE "line_item_shipments"."shipment_id" = $1  ORDER BY "order_line_items"."order_line_number" ASC, orders.id DESC')
orders
continue
exit
orders
continue
exit
EXIT
orders
order_line_items
continue
exit
order_line_items
orders
continue
exit
order_line_items
orders
continue
exit
orders
continue
exit
orders.map(&:id)
orders
continue
orders
order_line_items
self
continue
orders
line_item_shipments
order_line_items
self
continue
shipment.line_item_shipments.first.order_line_item.order
shipment.line_item_shipments.first.order_line_item
shipment.line_item_shipments
shipment_params
params
shipment.order_line_items
shipment.orders
shipment
continue
self.order_line_items
order_line_items
orders
continue
params
continue
code.order_discount_codes(:reload).count
continue
transaction.success?
transaction
continue
next
@card
@payment
next
params[:credit_card_token]
params[:payment_method]
exit
params
continue
qty_received_by_item
qty_shipped_by_item
continue
qty_received_by_item
qty_shipped_by_item
continue
exit
InventoryTransaction.where(inventory_id: inventory_id, inv_transaction_type: %w[LineItemShipment Transfer])
      inv_transaction_type: %w[LineItemShipment Transfer]
      inventory_id: inventory_id,
InventoryTransaction.where(
qty_shipped_by_item
continue
lir
continue
lir
continue
lir.order_line_item
lir
exit
params
return_authorization_params
continue
errors
next
lir.bin.nil?
continue
lir.bin.nil?
lir.bin
continue
[auth_columns, order_columns, customer_columns, reviewer_columns].flatten!.uniq!
[auth_columns, order_columns, customer_columns, reviewer_columns].flatten!
auth_columns
columns
continue
total
continue
exit
continue
@return_authorization.line_item_returns
@return_authorization
next
return_authorization_params
exit
params
return_authorization_params
exit
return_authorization_params
params
exit
old_knapsacks.last.items.map(&:name)
exit
old_knapsacks
current_knapsacks
continue
exit
current_knapsacks
old_knapsacks
continue
old_knapsacks
current_knapsacks
exit
